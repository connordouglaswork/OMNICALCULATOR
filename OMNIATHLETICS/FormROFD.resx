<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        TkSuQmCC
</value>
  </data>
</root>