<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>